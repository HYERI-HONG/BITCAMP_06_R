title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),ann =FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height[1,1],db_avg_height[1,2],db_avg_height[1,3]
db_avg_height[1,4],db_avg_height[1,5],db_avg_height[1,6]
db_avg_height[1,7],db_avg_height[1,8]))
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),ann =FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height$TEAMNAME))
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
db_month_count<-dbGetQuery(conn,"select
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201201'
) "1월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201202'
) "2월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201203'
) "3월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201204'
) "4월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201205'
) "5월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201206'
) "6월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201207'
) "7월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201208'
) "8월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201209'
) "9월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201210'
) "10월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201211'
) "11월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201212'
) "12월"
from dual")
db_month_count<-dbGetQuery(conn,"select
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201201'
) "1월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201202'
) "2월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201203'
) "3월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201204'
) "4월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201205'
) "5월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201206'
) "6월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201207'
) "7월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201208'
) "8월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201209'
) "9월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201210'
) "10월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201211'
) "11월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201212'
) "12월"
from dual"))
db_month_count<-dbGetQuery(conn,"select
ROWNUM "NO.",
a.*
from(select
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201201'
) JAN,
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201202'
) FEB,
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201203'
) MAR,
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201204'
) "4월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201205'
) "5월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201206'
) "6월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201207'
) "7월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201208'
) "8월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201209'
) "9월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201210'
) "10월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201211'
) "11월",
(select count(*)
from schedule s
where
substr(s.sche_date,0,6) like '201212'
) "12월"
from schedule) a
where ROWNUM<2")
df_month_count[,7]
df_month_count <- dbGetQuery(conn,"SELECT
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201201%') oneM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201202%') twoM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201203%') threeM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201204%') fourM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201205%') fiveM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201206%') sixM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201207%') sevenM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201208%') eightM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201209%') nineM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201210%') tenM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201211%') eleM,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201212%') twelM
FROM DUAL")
df_month_count[,7]
df_month_count
inputY <- df_month_count[,]
inputX <- c(1:12)
plot(x =  c(1:12),y = df_month_count[,],
xlab = "월",
ylab = "경기수",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "월별경기수", axes=FALSE
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),axes=FALSE,ann =FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height$TEAMNAME))
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),axes=FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height$TEAMNAME))
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),axes=FALSE,ann =FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height$TEAMNAME))
axis(2, at=165:185)
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
#inputY <- c(df_month_count[,4],df_month_count[,5],df_month_count[,6],df_month_count[,7],df_month_count[,8],df_month_count[,9],df_month_count[,10],df_month_count[,11],df_month_count[,12])
##inputY <- df_month_count[,]
##inputX <- c(1:12)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE, main.col="red"
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
#inputY <- c(df_month_count[,4],df_month_count[,5],df_month_count[,6],df_month_count[,7],df_month_count[,8],df_month_count[,9],df_month_count[,10],df_month_count[,11],df_month_count[,12])
##inputY <- df_month_count[,]
##inputX <- c(1:12)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE, col.main="red"
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE, col.main="red"
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH", col.lab ="red",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
#type = 'o',
main = "GAME COUNT PER MONTH", axes=FALSE, col.main="red"
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH", col.lab ="red",
ylab = "GAME COUNT",
#xlim = c(4,12),
#ylim = c(1,50),
type = '●',
main = "GAME COUNT PER MONTH", axes=FALSE, col.main="red"
)
axis(1, at=1:12) #x축
axis(2,at=2*0:50)
plot(x =c(1:12),y = df_month_count[,],
xlab = "MONTH", col.lab ="red",
ylab = "GAME COUNT",
main = "GAME COUNT PER MONTH", axes=FALSE, col.main="red"
)
axis(1, at=1:12,lab=c("1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"))
axis(2,at=2*0:50)
plot(db_avg_height$AVGHEIGHT,type = "o", col="red",ylim = c(165,185),axes=FALSE,ann =FALSE)
title(main = "AVEREGE HEIGHT", col.main="red")
axis(1, at=1:8, lab=c(db_avg_height$TEAMNAME))
axis(2, at=165:185)
title(xlab="TEAM NAME", col.lab="red")
title(ylab="HEIGHT", col.lab="red")
db_score_gap
hist(db_score_gap$SCOREGAP,xlab = "Weight",col = "yellow",border = "blue")
hist(db_score_gap$SCOREGAP,xlab = "Weight",col = "red",border = "black")
labels <- c(db_seat_count$STADIUM)
p1<-pie(db_seat_count$SEAT_COUNT,labels, cex=0.55)
barplot(db_win_count[,2],names.arg=db_win_count[,1],main = "2012 WIN COUNT",xlab = "TEAM NAME",ylab = "COUNT",border="blue")
barplot(db_win_count[,2],names.arg=db_win_count[,1],main = "2012 WIN COUNT",xlab = "TEAM NAME",ylab = "COUNT",border="blue")
height <- c(132,151,162,139,166,147,122)
weight <- c(48,49,66,53,67,52,40)
gender <- c("male","male","female","female","male","female","male")
input_data <- data.frame(height,weight,gender)
print(input_data)
# Test if the gender column is a factor.
print(is.factor(input_data$gender))
# Test if the gender column is a factor.
print(is.factor(input_data))
print(is.data.frame(input_data))
# Test if the gender column is a factor.
print(is.factor(input_data$height))
plot(factor(gender))
install.packages("ggplot2")
read.csv(file = "C:\\Users\\1027\\Downloads\\RWorkspace\\2013년_전년대비_시간대별_교통사고_사망자_현황")
read.csv(file = "C:\\Users\\1027\\Downloads\\RWorkspace\\2013년_전년대비_시간대별_교통사고_사망자_현황.csv")
x<-c("2","2","3","1","4","4","4","4")
x
qplot(x)
library(ggplot2)
qplot(x)
qplot(data = mpg, x=hwy)
#x축 cty
qplot(data = mpg, x = cty)
mpg <-as.data.frame(ggplot2::mpg)
head(mpg) #맨 위에 5개 보여줌
tail(mpg) #맨 아래 5개 보여줌
dim(mpg)
dim(mpg)
str(mpg)
summary(mpg)
str(mpg)
mpg$total <-(mpg$cty+mpg$hwy)/2
head(mpg) #맨 위에 5개 보여줌
summary(mpg$total)
##합격 판정 변수 만들기
#total이 20이상이면 pass, 미만이면 fail을 부여하는
#test라는 변수를 생성합니다.
mpg$test <-ifelse(mpg$total >= 20, "pass", "fail")
head(mpg,20)
#합격 판정을 받은 자동차수를 살펴보자
table(mpg$test)
qplot(mpg$test)
mpg$grade <-ifelse(
mpg$total >=30, "A",
ifelse(mpg$total >=20, "B","c")
)
table(mpg$grade)
qplot(mpg$grade)
mpg$grade <-ifelse(
mpg$total >=30, "A",
ifelse(mpg$total >=20, "B",
ifelse(mpg$total >=10,"C","D"))
)
qplot(mpg$grade)
mpg$grade <-ifelse(
mpg$total >=30, "A",
ifelse(mpg$total >=20, "B",
ifelse(mpg$total >=10,"C","D"))
)
qplot(mpg$grade)
midwest <-as.data.frame(ggplot2::midwest)
head(midwest)
# 1.  populator 변수를 total 로, popasian 변수를
# asian 으로 수정하세요
midwest$total<-midwest$populator
midwest$asian<-midwest$popasian
# 1.  poptotal 변수를 total 로, popasian 변수를
# asian 으로 수정하세요
midwest$total<-midwest$poptotal
midwest$asian<-midwest$popasian
head(midwest)
# 2. total, asian 변수를 이용해 '전체 인구 대비 아시아 인구
# 백분율' 파생변수를만들고, 히스토그램을 만들어 도시들이
# 어떻게 분포하는지 살펴보시오.
mpg$percent <-(midwest$asian/midwest$total)*100
# 2. total, asian 변수를 이용해 '전체 인구 대비 아시아 인구
# 백분율' 파생변수를만들고, 히스토그램을 만들어 도시들이
# 어떻게 분포하는지 살펴보시오.
midwest$percent <-(midwest$asian/midwest$total)*100
head(midwest)
(midwest)
hist(midwest$percent)
#통합 연비 변수 평균
mean(mpg$total)
#요약 통계량 산출
summary(mpg$total)
hist(mpg$total)
hist(mpg$total)
summary(midwest$percent)
mean(midwest$percent)
midwest$scale <-ifelse(
midwest$percent >0.4872462, "large","small")
head(midwest)
table(midwest$scale)
qplot(midwest$scale)
midwest <- subset(midwest,select = -poptotal)
midwest <- subset(midwest,select = -popasian)
head(midwest)
write.csv(midwest,file="update_midwest.csv")
midwest$scale <-ifelse(
midwest$percent > mean(midwest$percent), "large","small")
table(midwest$scale)
qplot(midwest$scale)
install.packages("dplyr")
library(dplyr)
path<-getwd()
path
setwd("csv_exam")
setwd("csv_exam")
df_exam <-read.csv("csv_exam.csv")
df_exam
View(df_exam)
df_exam<-rename(df_exam, userid =id)
df_exam
library(ggplot2)
df_exam<-as.data.frame(dplyr::df_exam)
df_exam$avg<-(df_exam$math+df_exam$english+df_exam$science)/3
df_exam$grade <-ifelse(
df_exam$avg >= 90, "A",
ifelse(df_exam$avg>=80,"B"),
ifelse(df_exam$avg>=70,"C"),
ifelse(df_exam$avg>=60,"D"),
ifelse(df_exam$avg>=50,"E"),
ifelse(df_exam$avg<50,"F")
)
df_exam$grade <-ifelse(
df_exam$avg >= 90, "A",
ifelse(df_exam$avg>=80,"B"),
ifelse(df_exam$avg>=70,"C"),
ifelse(df_exam$avg>=60,"D"),
ifelse(df_exam$avg>=50,"E","F")
)
df_exam$grade <-ifelse(
df_exam$avg >= 90, "A",
ifelse(df_exam$avg>=80,"B",
ifelse(df_exam$avg>=70,"C",
ifelse(df_exam$avg>=60,"D",
ifelse(df_exam$avg>=50,"E","F")
)
)
)
)
